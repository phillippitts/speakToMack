name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Fast unit tests on all platforms (no models required)
  unit-test:
    name: Unit Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, macos-13]
        java: ['21']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Build and run unit tests
        run: ./gradlew --no-daemon clean build -x integrationTest
        env:
          # Ensure we're only running unit tests
          GRADLE_OPTS: '-Dorg.gradle.daemon=false'

      - name: Upload test reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}
          path: |
            build/reports/tests/test
            build/test-results/test
            build/reports/checkstyle
          retention-days: 7

      - name: Upload JAR artifact (ubuntu only)
        if: matrix.os == 'ubuntu-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: speakToMack-jar
          path: build/libs/speakToMack-*.jar
          retention-days: 30

  # Full integration tests with models (Linux only for speed)
  integration-test:
    name: Integration Tests (Ubuntu + Models)
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Cache STT models
        id: cache-models
        uses: actions/cache@v4
        with:
          path: models/
          key: stt-models-${{ hashFiles('setup-models.sh') }}
          restore-keys: |
            stt-models-

      - name: Download STT models
        if: steps.cache-models.outputs.cache-hit != 'true'
        run: |
          chmod +x ./setup-models.sh
          ./setup-models.sh

      - name: Cache whisper.cpp binary
        id: cache-whisper
        uses: actions/cache@v4
        with:
          path: tools/whisper.cpp/
          key: whisper-cpp-${{ runner.os }}-${{ hashFiles('build-whisper.sh') }}
          restore-keys: |
            whisper-cpp-${{ runner.os }}-

      - name: Build whisper.cpp binary
        if: steps.cache-whisper.outputs.cache-hit != 'true'
        run: |
          chmod +x ./build-whisper.sh
          ./build-whisper.sh

      - name: Update application properties with absolute paths
        run: |
          WHISPER_BIN=$(find tools/whisper.cpp -name "main" -o -name "whisper" | head -1)
          if [ -z "$WHISPER_BIN" ]; then
            echo "ERROR: Whisper binary not found"
            exit 1
          fi
          echo "Found whisper binary: $WHISPER_BIN"

          # Update paths to absolute for CI
          cat > src/test/resources/application-test.properties << EOF
          stt.vosk.model-path=${GITHUB_WORKSPACE}/models/vosk-model-small-en-us-0.15
          stt.whisper.model-path=${GITHUB_WORKSPACE}/models/ggml-base.en.bin
          stt.whisper.binary-path=${GITHUB_WORKSPACE}/${WHISPER_BIN}
          EOF

      - name: Run integration tests
        run: ./gradlew --no-daemon integrationTest
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Upload integration test reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: |
            build/reports/tests/integrationTest
            build/test-results/integrationTest
          retention-days: 7

  # Verify whisper.cpp builds on macOS
  verify-whisper-macos:
    name: Verify whisper.cpp build (macOS)
    runs-on: macos-14
    needs: unit-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Xcode Command Line Tools
        run: xcode-select --install || true

      - name: Cache whisper.cpp binary
        id: cache-whisper
        uses: actions/cache@v4
        with:
          path: tools/whisper.cpp/
          key: whisper-cpp-${{ runner.os }}-${{ hashFiles('build-whisper.sh') }}

      - name: Build whisper.cpp
        if: steps.cache-whisper.outputs.cache-hit != 'true'
        run: |
          chmod +x ./build-whisper.sh
          ./build-whisper.sh

      - name: Verify whisper binary
        run: |
          WHISPER_BIN=$(find tools/whisper.cpp -name "main" -o -name "whisper" | head -1)
          if [ -z "$WHISPER_BIN" ]; then
            echo "ERROR: Whisper binary not found after build"
            exit 1
          fi
          echo "✅ Found whisper binary: $WHISPER_BIN"
          ls -lh "$WHISPER_BIN"
          file "$WHISPER_BIN"

  # Code quality checks
  code-quality:
    name: Code Quality (Checkstyle)
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run checkstyle
        run: ./gradlew --no-daemon checkstyleMain checkstyleTest

      - name: Upload checkstyle reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          path: |
            build/reports/checkstyle
          retention-days: 7

  # Summary job (required status check)
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test, verify-whisper-macos, code-quality]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          elif [ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]; then
            echo "⚠️ One or more CI jobs were cancelled"
            exit 1
          else
            echo "✅ All CI jobs passed"
          fi
